rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is family owner
    function isFamilyOwner(familyId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/artifacts/$(request.auth.token.project_id)/families/$(familyId)/members/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/artifacts/$(request.auth.token.project_id)/families/$(familyId)/members/$(request.auth.uid)).data.role == 'owner';
    }
    
    // Helper function to check if user is family member
    function isFamilyMember(familyId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/artifacts/$(request.auth.token.project_id)/families/$(familyId)/members/$(request.auth.uid));
    }
    
    // Users can only access their own user documents
    match /artifacts/{projectId}/users/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Family management with proper security
    match /artifacts/{projectId}/families/{familyId} {
      // Only authenticated users can create families
      allow create: if isAuthenticated();
      
      // Only family members can read family data
      allow read: if isFamilyMember(familyId);
      
      // Only family owner can update/delete family
      allow update, delete: if isFamilyOwner(familyId);
      
      // Family members management
      match /members/{memberId} {
        allow read: if isFamilyMember(familyId);
        allow write: if isFamilyOwner(familyId);
      }
      
      // Family events management
      match /events/{eventId} {
        allow read: if isFamilyMember(familyId);
        allow write: if isFamilyMember(familyId);
      }
    }
    
    // Family listing - only show families user is member of
    match /artifacts/{projectId}/families {
      allow read: if isAuthenticated();
    }
  }
} 